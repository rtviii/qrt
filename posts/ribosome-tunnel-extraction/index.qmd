---
title: "Ribosome Exit Tunnel Geometry"
subtitle: "Extraction Protocol via Space Partioning and DBSCAN"

engine: "jupyter"
author:
  - name: "Artem Kushner" 
    email: "rtkushner@gmail.com"
    affiliations:
      - name: KDD Group
        url: "https://rtviii.xyz/"

  - name: "Khanh Dao Duc" 
    email: "kdd@math.ubc.ca"
    affiliations:
      - name: Department of Mathematics, UBC
        url: "https://www.math.ubc.ca/"
      - name: Department of Computer Science, UBC
        url: "https://www.cs.ubc.ca/"
      - name: Department of Zoology, UBC
        url: "https://zoology.ubc.ca/"

date: "29 June 2024"
categories: [biology, mesh, computer graphics]    

# format:
#   pdf:
#     include-in-header:
#       text: |
#         \usepackage{amsmath}


execute:
  echo: false
  freeze: auto
  pip: ["pyvista", "open3d", "scikit-learn", "mendeleev", "compas", "matplotlib"]

---






# Introduce the ribosome a little bit and the problem

The ribosome is a complex molecular machine composed of two subunits - the large and small subunit - each made up of ribosomal RNA (rRNA) and proteins. It is central to the protein synthesis in all living organisms. The assembly of any given protein proceeds through a channel inside the ribosome known as the $Ribosome Exit Tunnel$. Here, we are interested in obtaining a fine representation of the tunnel's geometry and describe a protocol for doing so.

::: {.grid}
<style>
.grid {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 2px;
}
.video-container {
  position: relative;
  padding-bottom: 50.25%; /* 16:9 aspect ratio */
  height: 0;
  overflow: hidden;
}
.video-container video {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}
</style>

<div class="video-container">
  <video autoplay loop muted playsinline>
    <source src="./data/1IBL.mp4" type="video/mp4">
  </video>
</div>
<div class="video-container">
  <video autoplay loop muted playsinline>
    <source src="./data/6R7Q.mp4"" type="video/mp4">
  </video>
</div>
<div class="video-container">
  <video autoplay loop muted playsinline>
    <source src="./data/8OJ0.mp4" type="video/mp4">
  </video>
</div>
<div class="video-container">
  <video autoplay loop muted playsinline>
    <source src="./data/8T8C.mp4" type="video/mp4">
  </video>
</div>
:::

# Introduce the previous method and desirable improvements

### Extraction Protocol Schematic


![Ribosome Tunnel Extraction Workflow](./extraction_protocol.svg)

### Centerline Expansion

1. For each of the {$x,y,z$ coordinates, the probe radius $R_{probe}$} of the MOLE centerline, we extract the atoms that lie within $R_{probe} + R_{expansion}$ of $x,y,z$, filter out duplicates. Call this the ${\textit{Centerline Expansion Atoms}}$.

2. Calculate the coordinates of the bounding box $\mathbf{B}$ around the point cloud formed by the $\text{\textit{Centerline Expansion Atoms}}$.

3. (Returning to the structure), extract all atom coordinates inside the original structure that belong to $\mathbf{B}$. Call this $\text{\textit{Bbox Pointcloud}}$.

4. For each coordinate $C$ inside the $\textit{Bbox Pointcloud}$:
   - Generate indices for the voxels of a sphere with the center at $C$ and Van der Waals radius $R_{vdw} = \mathbf{2}$.
   (This is done by creating a voxel [sub]grid whose bounding cube is between $(C_x-R_{vdw},C_y-R_{vdw},C_z-R_{vdw})$ and $(C_x+R_{vdw},C_y+R_{vdw},C_z+R_{vdw})$, basically a cube of indices centered at $C$. Call the resulting coordinate set $\text{\textit{Expanded Pointcloud}}$)

5. Anchor the coordinates of the ${\textit{Expanded Pointcloud}}$ to the origin. 
   (This is done by subtracting the mean of the dataset from each coordinate and then shifting each coordinate upwards by the absolute value of the minimum of $x,y,z$). This is done to reduce the amount of empty voxel cells in the following steps.

### Voxel grid


1. Assume voxel size of $1$ in correspondence to the units of the dataset, Angstroms in our case. Alternatively, scale sphere expansion with the selected size of the grid. 

2. Create a boolean (zeros/ones) voxel grid with the dimensions of the ($\textit{Expanded Pointcloud}$ + $1$), call this the $\textit{Index Grid}$ (as opposed to the coordinate grid).

3. Set voxels at index [$C_{x},C_{y},C_{z}$] for every $C$ in shifted-to-origin $\textit{Expanded Pointcloud}$ in the $\textit{Index Grid}$ to 1. 

4. Invert the $\textit{Index Grid}$ to create a representation of the "negative space" inside the exit tunnel. 


### DBSCAN

```{python}
#| echo: true
import pickle
import pyvista as pv
from matplotlib import pyplot as plt
import numpy as np


FONT="courier"

eps      = 5.5
min_nbrs = 600

dbscan_cluster_dict = pickle.load(open("./data/dbscan_cluster_dict.pkl", "rb"))
plotter               = pv.Plotter()
plotter.subplot(0,0)
#? Visualize all clusters
for k, v in dbscan_cluster_dict.items():
    print("Cluster {} has {} points.".format(k, len(v)))

clusters_palette = dict(zip(range(-1, 60), plt.cm.terrain(np.linspace(0, 1, 60))))
for k, v in clusters_palette.items():
    clusters_palette[k] = [*v[:3], 0.5]

combined_cluster_colors = []
combined_cluster_points = []

for dbscan_label, coordinates in dbscan_cluster_dict.items():
    combined_cluster_points.extend(coordinates)
    combined_cluster_colors.extend( [clusters_palette[( dbscan_label * 5 )%len(clusters_palette)]   if dbscan_label != -1 else [0, 0, 0, 0.1]] * len(coordinates) )

ptcloud_all_clusters         = pv.PolyData(combined_cluster_points)
ptcloud_all_clusters["rgba"] = combined_cluster_colors

plotter.add_mesh(ptcloud_all_clusters, scalars="rgba", rgb=True, show_scalar_bar=False)

plotter.add_text('DBSCAN Params:\neps: {}\nmin_nbrs: {}'.format(eps, min_nbrs), position='upper_right', font_size=12, shadow=True, font=FONT, color='black')

plotter.add_text('DBSCAN Clusters', position='upper_left', font_size=14, shadow=True, font=FONT, color='black')
plotter.show()
```


### Normal Estimation

0. Largest DBSCAN Cluster
1. surface Points
2. delaunay_3d 
3. surface as pointset
4. Normal Estimation: KDTreeSearch 
5. Normal Orientation via consistent tangent plane




### Visualize Mesh


```{python}
#| echo: true
"""
@translation_vectors is a np.ndarray of shape (2,3) where
    - the first row is the means of the coordinate set
    - the second row is the deviations of the normalized coordinate set
    (to be used to reverse the normalization process or to travel to this coordinate frame)
"""
import pyvista as pv
import json
import numpy as np

FONT                  = 'courier'
CHAIN_PT_SIZE         = 8
PTC_PT_SIZE           = 20
CHAIN_LANDMARK_COLORS = ["purple","orange", "cornflowerblue", "cornsilk", "crimson", "darkblue", "darkcyan", "darkgoldenrod", "darkgray", "darkgreen", "darkkhaki", "darkmagenta", "darkolivegreen", "darkorange", "darkorchid", "darkred", "rebeccapurple", "rosybrown", "royalblue", "saddlebrown", "salmon", "sandybrown", "seagreen"]

def retrieve_ptc_and_chain_atoms(rcsb_id):
        with open( "./data/4UG0_tunnel_atoms_bbox.json", "r", ) as infile:
            bbox_atoms: list[dict] = json.load(infile)
            _atom_centers       = np.array(list(map(lambda x: x["coord"], bbox_atoms)))
            _vdw_radii          = np.array(list(map(lambda x: x["vdw_radius"], bbox_atoms)))


        with open( "./data/4UG0_PTC.json", "r", ) as infile:
            ptc_data = json.load(infile)

        atom_coordinates_by_chain: dict[str, list] = {}
        for atom in bbox_atoms:
            if len(atom["chain_nomenclature"]) < 1:
                # print( "atom ", atom, "has no chain nomenclature", atom["chain_nomenclature"] )
                continue
            if atom["chain_nomenclature"][0] not in atom_coordinates_by_chain:
                atom_coordinates_by_chain[atom["chain_nomenclature"][0]] = []
            atom_coordinates_by_chain[atom["chain_nomenclature"][0]].extend([atom["coord"]])

        ptc_midpoint = np.array(ptc_data["midpoint_coordinates"])

        return ptc_midpoint, atom_coordinates_by_chain

# src_taxid = RibosomeOps(rcsb_id).get_taxids()[0][0]
rcsb_id = "4UG0"
src_taxid = 9606
taxname   = "Homo sapiens"

ptc_midpoint,atom_coordinates_by_chain = retrieve_ptc_and_chain_atoms(rcsb_id)
poisson_recon = "./data/4UG0_poisson_recon_ascii.ply"
mesh_   = pv.read(poisson_recon)
plotter = pv.Plotter()
plotter.add_mesh(mesh_, opacity=1)


for i, ( chain_name, coords ) in enumerate(atom_coordinates_by_chain.items()):
    plotter.add_points(
            np.array(coords),
          point_size               = 8 if chain_name in ["eL39","uL4","uL22", "uL23"] else 2 if "rRNA" in chain_name else 4 ,
          color                    =  'gray' if "rRNA" in chain_name else "cyan" if chain_name == "eL39" else 'pink' if chain_name=='uL23' else "lightgreen" if chain_name == "uL4" else "gold" if chain_name =="uL22" else CHAIN_LANDMARK_COLORS[i],
          opacity                  = 0.1 if chain_name not in ["eL39","uL4","uL22", 'uL23'] else 1 ,
          render_points_as_spheres = True ,
    )

for i, (label, color) in enumerate([( 'eL39','cyan' ),( 'uL4','lightgreen' ),( 'uL22','gold' )]):
    offset   = i * 50  # Adjust the offset as needed
    position = (20, 200 - offset, 0)
    plotter.add_text( label, position=position, font_size=20, font=FONT,color=color, shadow=True )

plotter.add_points( 
    # move_cords_to_normalized_cord_frame( grid_dimensions, mean_abs_vectors, np.array([ptc_midpoint]) ),
    np.array([ptc_midpoint]),
                    point_size=PTC_PT_SIZE, color="red", render_points_as_spheres=True )

#!--- Labels ----
plotter.add_text('RCSB_ID:{}'.format(rcsb_id), position='upper_right', font_size=14, shadow=True, font=FONT, color='black')
# plotter.add_text('eps: {} \nmin_nbrs: {}'.format(eps, min_nbrs), position='upper_left', font_size=8, shadow=True, font=FONT, color='black')
plotter.add_text('Tunnel Mesh Volume: {}'.format(round(mesh_.volume, 3)), position='lower_left', font_size=8, shadow=True, font=FONT, color='black')
plotter.add_text('{}'.format(taxname), position='lower_right', font_size=8, shadow=True, font=FONT, color='black') 


plotter.show(auto_close=False)


```
